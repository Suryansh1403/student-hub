

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
id    String @id @unique
  // name          String
  email         String     @unique
  avatarUrl     String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  notes         Note[]
  likedNotes    Like[]
  bookmarked    Bookmark[]
  viewedNotes   View[]
  followers     User[]     @relation("UserFollows")
  following     User[]     @relation("UserFollows")
  contestResult ContestResult[] @relation("ContestParticipants")
}

model Note {
  id            String     @id @default(uuid())
  title         String?
  description   String?
  isPublic      Boolean    @default(false)
  views         Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String

  likes         Like[]
  bookmarks     Bookmark[]
  viewHistory   View[]
  key String @unique
  url String
}



model Like {
  id            String     @id @default(uuid())
  user          User       @relation(fields: [userId], references: [id])
  userId        String
  note          Note       @relation(fields: [noteId], references: [id])
  noteId        String
  createdAt     DateTime   @default(now())

  @@unique([userId, noteId])
}

model Bookmark {
  id            String     @id @default(uuid())
  user          User       @relation(fields: [userId], references: [id])
  userId        String
  note          Note       @relation(fields: [noteId], references: [id])
  noteId        String
  createdAt     DateTime   @default(now())

  @@unique([userId, noteId])
}

model View {
  id            String     @id @default(uuid())
  user          User       @relation(fields: [userId], references: [id])
  userId        String
  note          Note       @relation(fields: [noteId], references: [id])
  noteId        String
  viewedAt      DateTime   @default(now())
  ipAddress     String?
  userAgent     String?
}


model Question {
  id           String      @id @default(uuid())
  title        String
  description  String      @db.Text
  difficulty   Difficulty  
  tags         String[]    
  inputFormat  String?
  outputFormat String?
  constraints  String?
  examples     Example[]   
  testCases    TestCase[]  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  submittedCodes CodeSubmission[]
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}


model Example {
  id         String   @id @default(uuid())
  input      String   @db.Text
  output     String   @db.Text
  explanation String?
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

model TestCase {
  id         String   @id @default(uuid())
  input      String   @db.Text
  output     String   @db.Text
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

model CodeSubmission {
  id          String   @id @default(uuid())
  userId      String
  roomId      String
  questionId  String
  question   Question @relation(fields: [questionId], references: [id])
  code        String
  language    String   // e.g., "java", "cpp"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, roomId, questionId])
}


model ContestResult {
  id          String          @id @default(uuid())
  roomId      String          @unique
  winnerId    String?         // null if no winner
  reason      EndReason
  endedAt     DateTime        @default(now())
  
  participants User[]         @relation("ContestParticipants")
  leaderboard  LeaderboardEntry[]

  @@map("contest_results")
}

model LeaderboardEntry {
  id               String           @id @default(uuid())
  userId           String
  score            Int
  contestResultId  String
  contestResult    ContestResult   @relation(fields: [contestResultId], references: [id])
  questionStats    QuestionStat[]

  @@map("leaderboard_entries")
}

model QuestionStat {
  id                 String         @id @default(uuid())
  questionId         String
  attempts           Int
  isCorrect          Boolean
  leaderboardEntryId String
  leaderboardEntry   LeaderboardEntry @relation(fields: [leaderboardEntryId], references: [id])

  @@map("question_stats")
}



enum EndReason {
  winner
  time
}
