

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
id    String @id @unique
  // name          String
  email         String     @unique
  avatarUrl     String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  notes         Note[]
  likedNotes    Like[]
  bookmarked    Bookmark[]
  viewedNotes   View[]
  followers     User[]     @relation("UserFollows")
  following     User[]     @relation("UserFollows")
}

model Note {
  id            String     @id @default(uuid())
  title         String?
  description   String?
  isPublic      Boolean    @default(false)
  views         Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String

  likes         Like[]
  bookmarks     Bookmark[]
  viewHistory   View[]
  key String @unique
  url String
}



model Like {
  id            String     @id @default(uuid())
  user          User       @relation(fields: [userId], references: [id])
  userId        String
  note          Note       @relation(fields: [noteId], references: [id])
  noteId        String
  createdAt     DateTime   @default(now())

  @@unique([userId, noteId])
}

model Bookmark {
  id            String     @id @default(uuid())
  user          User       @relation(fields: [userId], references: [id])
  userId        String
  note          Note       @relation(fields: [noteId], references: [id])
  noteId        String
  createdAt     DateTime   @default(now())

  @@unique([userId, noteId])
}

model View {
  id            String     @id @default(uuid())
  user          User       @relation(fields: [userId], references: [id])
  userId        String
  note          Note       @relation(fields: [noteId], references: [id])
  noteId        String
  viewedAt      DateTime   @default(now())
  ipAddress     String?
  userAgent     String?
}


model Question {
  id           String      @id @default(uuid())
  title        String
  description  String      @db.Text
  difficulty   Difficulty  // Enum: EASY | MEDIUM | HARD
  tags         String[]    // ["DP", "Graphs"]
  inputFormat  String?
  outputFormat String?
  constraints  String?
  examples     Example[]   // shown to user
  testCases    TestCase[]  // hidden, for judging
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  submittedCodes CodeSubmission[]
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}


model Example {
  id         String   @id @default(uuid())
  input      String   @db.Text
  output     String   @db.Text
  explanation String?
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

model TestCase {
  id         String   @id @default(uuid())
  input      String   @db.Text
  output     String   @db.Text
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

model CodeSubmission {
  id          String   @id @default(uuid())
  userId      String
  roomId      String
  questionId  String
  question   Question @relation(fields: [questionId], references: [id])
  code        String
  language    String   // e.g., "java", "cpp"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, roomId, questionId])
}
